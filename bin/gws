#!/usr/bin/env bash

# Select a git worktree via peco and print its path.
set -euo pipefail

if ! command -v git >/dev/null 2>&1; then
  echo "gws: git command not found" >&2
  exit 127
fi

if ! command -v peco >/dev/null 2>&1; then
  echo "gws: peco command not found" >&2
  exit 127
fi

repo_root=$(git rev-parse --show-toplevel 2>/dev/null) || {
  echo "gws: not inside a git repository" >&2
  exit 1
}

current_worktree="$repo_root"
declare -a entries=()
worktree_path=""
worktree_branch=""

emit_entry() {
  if [[ -z "$worktree_path" ]]; then
    return
  fi

  local display_branch marker
  if [[ -n "$worktree_branch" ]]; then
    if [[ "$worktree_branch" == refs/heads/* ]]; then
      display_branch=${worktree_branch#refs/heads/}
    else
      display_branch="$worktree_branch"
    fi
  else
    display_branch="(detached HEAD)"
  fi

  marker=" "
  if [[ "$worktree_path" == "$current_worktree" ]]; then
    marker="*"
  fi

  entries+=("$marker $display_branch"$'\t'"$worktree_path")
  worktree_path=""
  worktree_branch=""
}

while IFS= read -r line || [[ -n "$line" ]]; do
  if [[ -z "$line" ]]; then
    emit_entry
    continue
  fi

  if [[ "$line" == worktree\ * ]]; then
    emit_entry
    worktree_path=${line#worktree }
    continue
  fi

  if [[ "$line" == branch\ * ]]; then
    worktree_branch=${line#branch }
    continue
  fi
done < <(git worktree list --porcelain)

emit_entry

if ((${#entries[@]} == 0)); then
  echo "gws: no worktrees found" >&2
  exit 1
fi

selection=$(printf '%s\n' "${entries[@]}" | peco --prompt 'worktree> ') || {
  status=$?
  # PEC0 returns 130 on Ctrl+C; propagate as-is for predictable behaviour.
  exit "$status"
}

if [[ -z "$selection" ]]; then
  exit 1
fi

target=${selection#*$'\t'}
printf '%s\n' "$target"
