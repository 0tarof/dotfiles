#!/usr/bin/env bash

set -euo pipefail

# Resolve the actual script location (follow symlinks)
SCRIPT_PATH="${BASH_SOURCE[0]}"
while [ -L "$SCRIPT_PATH" ]; do
    SCRIPT_DIR="$(cd "$(dirname "$SCRIPT_PATH")" && pwd)"
    SCRIPT_PATH="$(readlink "$SCRIPT_PATH")"
    [[ $SCRIPT_PATH != /* ]] && SCRIPT_PATH="$SCRIPT_DIR/$SCRIPT_PATH"
done
SCRIPT_DIR="$(cd "$(dirname "$SCRIPT_PATH")" && pwd)"
DOTFILES_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
BREWFILE="${DOTFILES_DIR}/Brewfile"
OVERLAY_BREWFILE="${DOTFILES_DIR}/overlay/Brewfile"
TEMP_FILE="${BREWFILE}.tmp"

# ヘッダー（おまじない）を抽出
extract_header() {
    if [ -f "$BREWFILE" ]; then
        awk '/^# Load overlay Brewfile/,/^end$/ {print} /^end$/ {exit}' "$BREWFILE" 2>/dev/null || true
    fi
}

# overlay/Brewfileからパッケージリストを抽出
extract_overlay_packages() {
    if [ -f "$OVERLAY_BREWFILE" ]; then
        # tap, brew, cask, vsocdeなどのエントリを抽出
        grep -E '^(tap|brew|cask|vscode|mas) ' "$OVERLAY_BREWFILE" 2>/dev/null || true
    fi
}

# Brewfileをダンプ
brew bundle dump --force --file="$TEMP_FILE"

# ヘッダーを保持して新しいBrewfileを作成
{
    header=$(extract_header)
    if [ -n "$header" ]; then
        echo "$header"
        echo ""
    fi
    cat "$TEMP_FILE"
} > "$BREWFILE.new"

# overlay/Brewfileの内容を除外
if [ -f "$OVERLAY_BREWFILE" ]; then
    cp "$BREWFILE.new" "$BREWFILE.filtered"
    
    # overlay/Brewfileから各エントリを読み込んで除外
    while IFS= read -r pattern; do
        [ -z "$pattern" ] && continue
        # パターンをエスケープして完全一致で除外
        escaped_pattern=$(echo "$pattern" | sed 's/[[\.*^$()+?{|]/\\&/g')
        grep -v "^$escaped_pattern$" "$BREWFILE.filtered" > "$BREWFILE.filtered.tmp" || true
        mv "$BREWFILE.filtered.tmp" "$BREWFILE.filtered"
    done < <(extract_overlay_packages)
    
    mv "$BREWFILE.filtered" "$BREWFILE.new"
    echo "Applied exclusions from overlay/Brewfile"
fi

# 最終的なBrewfileに置き換え
mv "$BREWFILE.new" "$BREWFILE"
rm -f "$TEMP_FILE"

echo "Brewfile dumped successfully"